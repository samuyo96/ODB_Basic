--Crear tablas Clientes y Pedidos

CREATE TABLE Clientes (
    Cl_ID NUMBER GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    Cl_Name VARCHAR (45) NOT NULL,
    Cl_SecondName VARCHAR (45)
);

CREATE TABLE Pedidos (
    P_ID NUMBER GENERATED BY DEFAULT AS IDENTITY
    (START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    Cl_ID INT,
    FOREIGN KEY (Cl_ID) REFERENCES Clientes,
    P_Cost DECIMAL(10,2),
    P_Date DATE DEFAULT SYSDATE
);

--Adición de datos a las distintas tablas

INSERT INTO clientes(Cl_Name, Cl_SecondName)
VALUES
    ('Samuel', 'Noval'),
    ('Helena', 'Noval'),
    ('Luciano', 'Noval'),
    ('Isabel', 'López'),
    ('Oogie', 'Pipez'),
    ('Ricardo', 'Del Amo'),
    ('Luis María', 'Pérez'),
    ('Simón', 'Martínez'),
    ('Charito', 'Ruiz'),
    ('Angela', 'Celaya');
    
INSERT INTO pedidos(Cl_ID, P_Cost)
VALUES
    (1, 10.20),
    (1, 1.35),
    (2, 30.30),
    (1, 15.45),
    (3, 9.95),
    (4, 50.05),
    (3, 20.30),
    (1, 22.20),
    (7, 22.80),
    (9, 10.90);
    
--Procedimientos encapsultados C (Crear) de CRUD 

CREATE OR REPLACE PROCEDURE InsertarCliente (
    In_Name IN VARCHAR2,
    In_SecondName IN VARCHAR2   
) AS
BEGIN 
    INSERT INTO clientes (cl_name, cl_secondname)
    VALUES(In_Name, In_SecondName);
END;

CREATE OR REPLACE PROCEDURE InsertarPedido (
    In_Cl_ID IN NUMBER,
    In_Cost IN NUMBER   
) AS
BEGIN 
    INSERT INTO pedidos (cl_id, p_cost)
    VALUES(In_Cl_ID, In_Cost);
END;

--Procedimientos encapsulados para R (Leer) de CRUD y prueba de ello.

CREATE OR REPLACE PROCEDURE Leer_Pedidos_Y_Clientes_Por_Coste(
    In_Cost IN NUMBER,
    Out_Result OUT SYS_REFCURSOR
) AS 
BEGIN
    OPEN Out_Result FOR
    SELECT c.Cl_Name, p.P_ID, p.P_Date, p.P_Cost
    FROM clientes c
    INNER JOIN pedidos p ON c.Cl_ID = p.Cl_ID
    WHERE P_Cost >= In_Cost;
END;

SET SERVEROUTPUT ON;

DECLARE 
    v_Result SYS_REFCURSOR;
    v_Cl_Name VARCHAR2(45);
    v_P_ID NUMBER;
    v_P_Date DATE;
    v_P_Cost NUMBER;
BEGIN
    Leer_Pedidos_Y_Clientes_Por_Coste(0, v_Result);
    LOOP
        FETCH v_Result INTO v_Cl_Name, v_P_ID, v_P_Date, v_P_Cost;
        EXIT WHEN v_Result%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || v_Cl_Name || ' ID: Pedido: ' || v_P_ID ||
            ' Fecha: ' || v_P_Date || ' Coste: ' || v_P_Cost || '€');
    END LOOP;
    CLOSE v_Result;
END;
            

--Procedimientos encapsultados U (Actualizar) de CRUD 

CREATE OR REPLACE PROCEDURE ActualizarCliente(
    In_Column IN VARCHAR2,
    In_Value IN VARCHAR2,
    In_ID IN NUMBER
) AS
BEGIN 
    IF In_Column = 'Cl_Name' THEN
        UPDATE clientes
        SET cl_name = In_Value
        WHERE Cl_ID = In_ID;
    ELSIF In_Column = 'Cl_SecondName' THEN
        UPDATE clientes
        SET cl_secondName = In_Value
        WHERE cl_id = In_ID;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'No existe la columna');
    END IF;
END;
/

CREATE OR REPLACE PROCEDURE ActualizarPedidos(
    In_Column IN NUMBER,
    In_Value IN NUMBER,
    In_ID IN NUMBER
) AS
BEGIN 
    IF In_Column = 'Cl_ID' THEN
        UPDATE pedidos
        SET cl_id = In_Value
        WHERE p_id = In_ID;
    ELSIF In_Column = 'P_Cost' THEN
        UPDATE pedidos
        SET p_cost = In_Value
        WHERE p_id = In_ID;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'No existe la columna');
    END IF;
END;
